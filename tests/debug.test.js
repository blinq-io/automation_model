import { get } from "http";
import { initContext } from "../build/lib/auto_page.js";
import { closeBrowser } from "../build/lib/init_browser.js";
import { existsSync, mkdirSync, rmdirSync } from "fs";

const name = "login";
const path = "/";
const elements = {
  textbox_username: {
    locators: [
      { role: ["textbox", { name: "Username" }] },
      { priority: 1, css: "#username" },
      { priority: 1, css: "[name='username']" },
    ],
    element_name: "username field",
  },

  textbox_password: {
    locators: [
      { role: ["textbox", { name: "Password" }] },
      { priority: 1, css: "#password" },
      { priority: 1, css: "[name='password']" },
    ],
    element_name: "password field",
  },
  button_login: {
    locators: [
      { text: "LOGIN", tag: "button" },
      { role: ["button", { name: "LOGIN" }] },
      { tagOnly: true, priority: 3, css: "button" },
    ],
    element_name: "login button",
  },
  button_: {
    locators: [
      { text: "{item}", climb: 2, css: "div.MuiBox-root.css-k008qs > button", priority: 1 },
      {
        priority: 3,
        css: "#root > div > div > div > div.MuiGrid-root.MuiGrid-item.MuiGrid-grid-xs-1.MuiGrid-grid-lg-4.css-zerdg2 > div > div.MuiBox-root.css-k008qs > button",
      },
    ],
    element_name: "add to basket button for Urban Backpack",
  },
  button_cart_with_1_items: {
    locators: [
      { text: "1", tag: "div" },
      { role: ["button", { name: "Cart with 1 items" }] },
      { priority: 1, css: "#cart" },
      { priority: 1, css: "[role='button']" },
      { autogenerated: true, priority: 3, css: "[aria-label='Cart\\ with\\ 1\\ items']" },
    ],
    element_name: "cart button",
  },
  paragraph_total: {
    locators: [
      { text: "Total", tag: "p" },
      {
        priority: 3,
        css: "#root > div > div > div.MuiBox-root.css-5fhkjp > div > div > div:nth-child(7) > p.MuiTypography-root.MuiTypography-body1.css-ifp30f",
      },
    ],
    element_name: "paragraph: Total",
  },
  button_checkout: {
    locators: [
      { text: "CHECKOUT", tag: "button" },
      { role: ["button", { name: "CHECKOUT" }] },
      { priority: 3, css: "#root > div > div > div.MuiBox-root.css-5fhkjp > div > div > button" },
    ],
    element_name: "CHECKOUT button",
  },
  textbox_first_name: {
    locators: [{ role: ["textbox", { name: "First name" }] }, { autogenerated: true, priority: 3, css: "#\\:r2\\:" }],
    element_name: "First name",
  },
  textbox_last_name: {
    locators: [{ role: ["textbox", { name: "Last name" }] }, { autogenerated: true, priority: 3, css: "#\\:r3\\:" }],
    element_name: "last name",
  },
  textbox_zip_postal_code: {
    locators: [
      { role: ["textbox", { name: "Zip/Postal code" }] },
      { autogenerated: true, priority: 3, css: "#\\:r4\\:" },
    ],
    element_name: "zip",
  },
  button_continue: {
    locators: [
      { text: "CONTINUE", tag: "button" },
      { role: ["button", { name: "CONTINUE" }] },
      { priority: 3, css: "#root > div > div > div.MuiBox-root.css-5fhkjp > div > div > button" },
    ],
    element_name: "CONTINUE button",
  },
};
let screenshotId = 0;
function getScreenShotPath() {
  screenshotId++;
  if (!existsSync("./screenshots")) {
    mkdirSync("./screenshots", { recursive: true });
  }
  return "./screenshots/" + screenshotId + ".png";
}
const context = await initContext(path, true, false, null, 450);
const login = async function (username, password) {
  // if screenshot folder exist delete it
  if (existsSync("./screenshots")) {
    rmdirSync("./screenshots", { recursive: true });
  }
  const _params = { username, password };
  let options = {};
  options.screenshot = true;
  options.screenshotPath = getScreenShotPath();
  // let body = await context.stable._getDocumentBody(elements["textbox_username"]);
  // console.log("Body: ", body);
  // await context.stable.simpleClickType("Username field", username, _params, options, null);
  // await context.stable.simpleClickType("Password field", password, _params, options, null);
  // await context.stable.simpleClick("Login button", _params, options, null);
  // await context.stable.verifyTextExistInPage("/Log\\s+In/mg", {}, null);
  // Fill username field with "username"
  await context.stable.clickType(elements["textbox_username"], username, false, _params, options, null);
  // Fill password field with "password"
  options.screenshotPath = getScreenShotPath();
  await context.stable.clickType(elements["textbox_password"], password, false, _params, options, null);
  // Click on login button
  options.screenshotPath = getScreenShotPath();
  await context.stable.click(elements["button_login"], _params, options, null);
};
await login("blinq_user", "let_me_in");

await new Promise((resolve) => setTimeout(resolve, 1000));
await closeBrowser();
